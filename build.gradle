buildscript {
    repositories {
        gradlePluginPortal()
        mavenCentral()
    }
}

plugins {
    id "java-gradle-plugin"
    id "maven-publish"
    id "org.jetbrains.kotlin.jvm" version "1.9.10"
    // https://docs.gradle.org/current/userguide/compatibility.html#kotlin
    id "org.jetbrains.kotlin.plugin.serialization" version "1.9.10"
    id "org.jlleitschuh.gradle.ktlint" version "12.1.1"
    id "com.gradle.plugin-publish" version "1.2.1"
    id 'org.jreleaser' version '1.18.0'
}

group = "be.orvar"
version = "1.14.0-java8"

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).configureEach {
    compilerOptions {
        apiVersion = org.jetbrains.kotlin.gradle.dsl.KotlinVersion.KOTLIN_1_9
        languageVersion = org.jetbrains.kotlin.gradle.dsl.KotlinVersion.KOTLIN_1_9
    }
}

tasks.withType(AbstractArchiveTask).configureEach {
    preserveFileTimestamps = false
    reproducibleFileOrder = true
}

gradlePlugin {
    website = 'https://github.com/orvar-labs/opentelemetry-gradle-plugin-java8'
    vcsUrl = 'https://github.com/orvar-labs/opentelemetry-gradle-plugin-java8'
    plugins {
        opentelemetryPlugin {
            id = 'be.orvar.opentelemetry-build-java8'
            implementationClass = 'com.atkinsondev.opentelemetry.build.OpenTelemetryBuildPlugin'
            displayName = 'OpenTelemetry build plugin - Java 8'
            description = 'Instrument your Gradle build with OpenTelemetry observability to find and eliminate build bottlenecks'
            tags.addAll(['observability', 'opentelemetry', 'telemetry'])
        }
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation "io.opentelemetry:opentelemetry-api:$otelVersion"
    implementation "io.opentelemetry:opentelemetry-sdk:$otelVersion"
    implementation "io.opentelemetry:opentelemetry-exporter-otlp:$otelVersion"
    implementation "io.opentelemetry:opentelemetry-exporter-zipkin:$otelVersion"
    implementation "io.opentelemetry.semconv:opentelemetry-semconv:$otelSemConvVersion"
    implementation("io.opentelemetry.proto:opentelemetry-proto:$otelProtoVersion")

    testImplementation gradleTestKit()

    testImplementation(platform("org.junit:junit-bom:5.10.2"))
    testImplementation "org.junit.jupiter:junit-jupiter"

    testImplementation "com.github.tomakehurst:wiremock-jre8:2.27.2"
    testImplementation "io.strikt:strikt-core:0.34.1"
    testImplementation "org.awaitility:awaitility-kotlin:4.2.1"
    testImplementation "io.mockk:mockk:1.13.11"
    testImplementation "org.testcontainers:testcontainers:1.19.8"
    testImplementation "org.jetbrains.kotlinx:kotlinx-serialization-json:1.6.3"
    testImplementation "com.squareup.okhttp3:okhttp:4.12.0"
    testImplementation("io.grpc:grpc-netty:1.61.0")
    testImplementation("io.grpc:grpc-protobuf:1.61.0")
    testImplementation("io.grpc:grpc-stub:1.61.0")
    testImplementation("io.grpc:grpc-inprocess:1.61.0")
}

test {
    useJUnitPlatform()

    maxParallelForks = Runtime.runtime.availableProcessors().intdiv(2) ?: 1
}

ktlint {
    disabledRules = ["no-wildcard-imports"]
}

publishing {
    publications {
        mavenCentral(MavenPublication) {
            from components.java

            pom {
                name = 'opentelemetry-gradle-plugin-java8'
                description = 'Instrument your Gradle build with OpenTelemetry observability to find and eliminate build bottlenecks'
                url = 'https://github.com/orvar-labs/opentelemetry-gradle-plugin-java8'
                inceptionYear = '2025'
                licenses {
                    license {
                        name = 'Apache-2.0'
                        url = 'https://spdx.org/licenses/Apache-2.0.html'
                    }
                }
                developers {
                    developer {
                        id = 'tomjo'
                        name = 'Tom Jorissen'
                        email = 'tom.jorissen@orvar.be'
                        organization = 'Orvar'
                        organizationUrl = 'https://www.orvar.be'
                    }
                }
                scm {
                    connection = 'scm:git:https://github.com/orvar-labs/opentelemetry-gradle-plugin-java8.git'
                    developerConnection = 'scm:git:ssh://github.com:orvar-labs/opentelemetry-gradle-plugin-java8.git'
                    url = 'https://github.com/orvar-labs/opentelemetry-gradle-plugin-java8'
                }
            }
        }
    }

    repositories {
        maven {
            name = "staging-deploy"
            url = layout.buildDirectory.dir('staging-deploy')
        }
    }
}

jreleaser {
    signing {
        active = 'ALWAYS'
        armored = true
    }
    deploy {
        maven {
            mavenCentral {
                sonatype {
                    active = 'ALWAYS'
                    url = 'https://central.sonatype.com/api/v1/publisher'
                    stagingRepository('build/staging-deploy')
                }
            }
        }
    }
}